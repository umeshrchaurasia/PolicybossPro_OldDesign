// Generated by view binder compiler. Do not edit!
package com.policyboss.policybosspro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.policyboss.policybosspro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class BenefitIllustratorItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout lyParent;

  @NonNull
  public final TableRow tableRow1;

  @NonNull
  public final TableLayout tbParent;

  @NonNull
  public final TextView txtAge;

  @NonNull
  public final TextView txtAnnualPrem;

  @NonNull
  public final TextView txtCashFlow;

  @NonNull
  public final TextView txtLifeCover;

  @NonNull
  public final TextView txtLoanAvailable;

  @NonNull
  public final TextView txtPolicyYear;

  private BenefitIllustratorItemBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout lyParent, @NonNull TableRow tableRow1, @NonNull TableLayout tbParent,
      @NonNull TextView txtAge, @NonNull TextView txtAnnualPrem, @NonNull TextView txtCashFlow,
      @NonNull TextView txtLifeCover, @NonNull TextView txtLoanAvailable,
      @NonNull TextView txtPolicyYear) {
    this.rootView = rootView;
    this.lyParent = lyParent;
    this.tableRow1 = tableRow1;
    this.tbParent = tbParent;
    this.txtAge = txtAge;
    this.txtAnnualPrem = txtAnnualPrem;
    this.txtCashFlow = txtCashFlow;
    this.txtLifeCover = txtLifeCover;
    this.txtLoanAvailable = txtLoanAvailable;
    this.txtPolicyYear = txtPolicyYear;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static BenefitIllustratorItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BenefitIllustratorItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.benefit_illustrator_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BenefitIllustratorItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      LinearLayout lyParent = (LinearLayout) rootView;

      id = R.id.tableRow1;
      TableRow tableRow1 = rootView.findViewById(id);
      if (tableRow1 == null) {
        break missingId;
      }

      id = R.id.tbParent;
      TableLayout tbParent = rootView.findViewById(id);
      if (tbParent == null) {
        break missingId;
      }

      id = R.id.txtAge;
      TextView txtAge = rootView.findViewById(id);
      if (txtAge == null) {
        break missingId;
      }

      id = R.id.txtAnnualPrem;
      TextView txtAnnualPrem = rootView.findViewById(id);
      if (txtAnnualPrem == null) {
        break missingId;
      }

      id = R.id.txtCashFlow;
      TextView txtCashFlow = rootView.findViewById(id);
      if (txtCashFlow == null) {
        break missingId;
      }

      id = R.id.txtLifeCover;
      TextView txtLifeCover = rootView.findViewById(id);
      if (txtLifeCover == null) {
        break missingId;
      }

      id = R.id.txtLoanAvailable;
      TextView txtLoanAvailable = rootView.findViewById(id);
      if (txtLoanAvailable == null) {
        break missingId;
      }

      id = R.id.txtPolicyYear;
      TextView txtPolicyYear = rootView.findViewById(id);
      if (txtPolicyYear == null) {
        break missingId;
      }

      return new BenefitIllustratorItemBinding((LinearLayout) rootView, lyParent, tableRow1,
          tbParent, txtAge, txtAnnualPrem, txtCashFlow, txtLifeCover, txtLoanAvailable,
          txtPolicyYear);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
