// Generated by view binder compiler. Do not edit!
package com.policyboss.policybosspro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatAutoCompleteTextView;
import androidx.appcompat.widget.Toolbar;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import com.google.android.material.textfield.TextInputLayout;
import com.policyboss.policybosspro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityKotakpersonalloanBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final AppCompatAutoCompleteTextView acEmployerName;

  @NonNull
  public final Button btnKotakplNext;

  @NonNull
  public final Button btnROICalc;

  @NonNull
  public final CardView ccCompantDetail;

  @NonNull
  public final CardView ccContactDetail;

  @NonNull
  public final CardView ccCurrentAddress;

  @NonNull
  public final CardView ccPersonal;

  @NonNull
  public final CheckBox chkSameAsAbove;

  @NonNull
  public final CheckBox chkTermsCondition;

  @NonNull
  public final EditText etAadharNumber;

  @NonNull
  public final EditText etAdd1;

  @NonNull
  public final EditText etAdd2;

  @NonNull
  public final EditText etAdd3;

  @NonNull
  public final EditText etCRNNumber;

  @NonNull
  public final EditText etCoAppDOB;

  @NonNull
  public final EditText etCoAppEMICurrentlyPay;

  @NonNull
  public final EditText etCoAppEmployerName;

  @NonNull
  public final EditText etCoAppNrtMonthlyIncome;

  @NonNull
  public final EditText etCurrentResidence;

  @NonNull
  public final EditText etDOB;

  @NonNull
  public final EditText etEmail;

  @NonNull
  public final EditText etFirstName;

  @NonNull
  public final EditText etJoiningDate;

  @NonNull
  public final EditText etLastName;

  @NonNull
  public final EditText etMiddleName;

  @NonNull
  public final EditText etMobileNumber;

  @NonNull
  public final EditText etNetMonthIncome;

  @NonNull
  public final EditText etOfficeAddress1;

  @NonNull
  public final EditText etOfficeAddress2;

  @NonNull
  public final EditText etOfficeAddress3;

  @NonNull
  public final EditText etOfficePhone;

  @NonNull
  public final EditText etOfficePincode;

  @NonNull
  public final EditText etPLRateOff;

  @NonNull
  public final EditText etPanCard;

  @NonNull
  public final EditText etPartyId;

  @NonNull
  public final EditText etPerAdd1;

  @NonNull
  public final EditText etPerAdd2;

  @NonNull
  public final EditText etPerAdd3;

  @NonNull
  public final EditText etPerPincode;

  @NonNull
  public final EditText etPerResidencePhnNo;

  @NonNull
  public final EditText etPincode;

  @NonNull
  public final EditText etProcessingFees;

  @NonNull
  public final EditText etReqLoanAmnt;

  @NonNull
  public final EditText etResidencePhnNo;

  @NonNull
  public final EditText etTotalEMIperMonth;

  @NonNull
  public final EditText etTotalWorkExp;

  @NonNull
  public final LinearLayout llCoApplicantDetail;

  @NonNull
  public final RadioButton rbNo;

  @NonNull
  public final RadioButton rbYes;

  @NonNull
  public final RadioButton rbfemale;

  @NonNull
  public final RadioButton rbmale;

  @NonNull
  public final RadioGroup rgCoApp;

  @NonNull
  public final RadioGroup rgGender;

  @NonNull
  public final Spinner spCoAppEmpType;

  @NonNull
  public final Spinner spCurrentAddressCity;

  @NonNull
  public final Spinner spCustomerTypeMaster;

  @NonNull
  public final Spinner spEmployementType;

  @NonNull
  public final Spinner spExistingCustomer;

  @NonNull
  public final Spinner spOfficeCity;

  @NonNull
  public final Spinner spPerCity;

  @NonNull
  public final Spinner spPreferredMailingAddress;

  @NonNull
  public final Spinner spQualif;

  @NonNull
  public final Spinner spRelationshipWithCoApp;

  @NonNull
  public final Spinner spReqLoanTenure;

  @NonNull
  public final Spinner spResidenceType;

  @NonNull
  public final TextInputLayout tlPLRateOff;

  @NonNull
  public final TextInputLayout tlProcessingFees;

  @NonNull
  public final Toolbar toolbar;

  private ActivityKotakpersonalloanBinding(@NonNull LinearLayout rootView,
      @NonNull AppCompatAutoCompleteTextView acEmployerName, @NonNull Button btnKotakplNext,
      @NonNull Button btnROICalc, @NonNull CardView ccCompantDetail,
      @NonNull CardView ccContactDetail, @NonNull CardView ccCurrentAddress,
      @NonNull CardView ccPersonal, @NonNull CheckBox chkSameAsAbove,
      @NonNull CheckBox chkTermsCondition, @NonNull EditText etAadharNumber,
      @NonNull EditText etAdd1, @NonNull EditText etAdd2, @NonNull EditText etAdd3,
      @NonNull EditText etCRNNumber, @NonNull EditText etCoAppDOB,
      @NonNull EditText etCoAppEMICurrentlyPay, @NonNull EditText etCoAppEmployerName,
      @NonNull EditText etCoAppNrtMonthlyIncome, @NonNull EditText etCurrentResidence,
      @NonNull EditText etDOB, @NonNull EditText etEmail, @NonNull EditText etFirstName,
      @NonNull EditText etJoiningDate, @NonNull EditText etLastName, @NonNull EditText etMiddleName,
      @NonNull EditText etMobileNumber, @NonNull EditText etNetMonthIncome,
      @NonNull EditText etOfficeAddress1, @NonNull EditText etOfficeAddress2,
      @NonNull EditText etOfficeAddress3, @NonNull EditText etOfficePhone,
      @NonNull EditText etOfficePincode, @NonNull EditText etPLRateOff, @NonNull EditText etPanCard,
      @NonNull EditText etPartyId, @NonNull EditText etPerAdd1, @NonNull EditText etPerAdd2,
      @NonNull EditText etPerAdd3, @NonNull EditText etPerPincode,
      @NonNull EditText etPerResidencePhnNo, @NonNull EditText etPincode,
      @NonNull EditText etProcessingFees, @NonNull EditText etReqLoanAmnt,
      @NonNull EditText etResidencePhnNo, @NonNull EditText etTotalEMIperMonth,
      @NonNull EditText etTotalWorkExp, @NonNull LinearLayout llCoApplicantDetail,
      @NonNull RadioButton rbNo, @NonNull RadioButton rbYes, @NonNull RadioButton rbfemale,
      @NonNull RadioButton rbmale, @NonNull RadioGroup rgCoApp, @NonNull RadioGroup rgGender,
      @NonNull Spinner spCoAppEmpType, @NonNull Spinner spCurrentAddressCity,
      @NonNull Spinner spCustomerTypeMaster, @NonNull Spinner spEmployementType,
      @NonNull Spinner spExistingCustomer, @NonNull Spinner spOfficeCity,
      @NonNull Spinner spPerCity, @NonNull Spinner spPreferredMailingAddress,
      @NonNull Spinner spQualif, @NonNull Spinner spRelationshipWithCoApp,
      @NonNull Spinner spReqLoanTenure, @NonNull Spinner spResidenceType,
      @NonNull TextInputLayout tlPLRateOff, @NonNull TextInputLayout tlProcessingFees,
      @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.acEmployerName = acEmployerName;
    this.btnKotakplNext = btnKotakplNext;
    this.btnROICalc = btnROICalc;
    this.ccCompantDetail = ccCompantDetail;
    this.ccContactDetail = ccContactDetail;
    this.ccCurrentAddress = ccCurrentAddress;
    this.ccPersonal = ccPersonal;
    this.chkSameAsAbove = chkSameAsAbove;
    this.chkTermsCondition = chkTermsCondition;
    this.etAadharNumber = etAadharNumber;
    this.etAdd1 = etAdd1;
    this.etAdd2 = etAdd2;
    this.etAdd3 = etAdd3;
    this.etCRNNumber = etCRNNumber;
    this.etCoAppDOB = etCoAppDOB;
    this.etCoAppEMICurrentlyPay = etCoAppEMICurrentlyPay;
    this.etCoAppEmployerName = etCoAppEmployerName;
    this.etCoAppNrtMonthlyIncome = etCoAppNrtMonthlyIncome;
    this.etCurrentResidence = etCurrentResidence;
    this.etDOB = etDOB;
    this.etEmail = etEmail;
    this.etFirstName = etFirstName;
    this.etJoiningDate = etJoiningDate;
    this.etLastName = etLastName;
    this.etMiddleName = etMiddleName;
    this.etMobileNumber = etMobileNumber;
    this.etNetMonthIncome = etNetMonthIncome;
    this.etOfficeAddress1 = etOfficeAddress1;
    this.etOfficeAddress2 = etOfficeAddress2;
    this.etOfficeAddress3 = etOfficeAddress3;
    this.etOfficePhone = etOfficePhone;
    this.etOfficePincode = etOfficePincode;
    this.etPLRateOff = etPLRateOff;
    this.etPanCard = etPanCard;
    this.etPartyId = etPartyId;
    this.etPerAdd1 = etPerAdd1;
    this.etPerAdd2 = etPerAdd2;
    this.etPerAdd3 = etPerAdd3;
    this.etPerPincode = etPerPincode;
    this.etPerResidencePhnNo = etPerResidencePhnNo;
    this.etPincode = etPincode;
    this.etProcessingFees = etProcessingFees;
    this.etReqLoanAmnt = etReqLoanAmnt;
    this.etResidencePhnNo = etResidencePhnNo;
    this.etTotalEMIperMonth = etTotalEMIperMonth;
    this.etTotalWorkExp = etTotalWorkExp;
    this.llCoApplicantDetail = llCoApplicantDetail;
    this.rbNo = rbNo;
    this.rbYes = rbYes;
    this.rbfemale = rbfemale;
    this.rbmale = rbmale;
    this.rgCoApp = rgCoApp;
    this.rgGender = rgGender;
    this.spCoAppEmpType = spCoAppEmpType;
    this.spCurrentAddressCity = spCurrentAddressCity;
    this.spCustomerTypeMaster = spCustomerTypeMaster;
    this.spEmployementType = spEmployementType;
    this.spExistingCustomer = spExistingCustomer;
    this.spOfficeCity = spOfficeCity;
    this.spPerCity = spPerCity;
    this.spPreferredMailingAddress = spPreferredMailingAddress;
    this.spQualif = spQualif;
    this.spRelationshipWithCoApp = spRelationshipWithCoApp;
    this.spReqLoanTenure = spReqLoanTenure;
    this.spResidenceType = spResidenceType;
    this.tlPLRateOff = tlPLRateOff;
    this.tlProcessingFees = tlProcessingFees;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityKotakpersonalloanBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityKotakpersonalloanBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_kotakpersonalloan, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityKotakpersonalloanBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.acEmployerName;
      AppCompatAutoCompleteTextView acEmployerName = rootView.findViewById(id);
      if (acEmployerName == null) {
        break missingId;
      }

      id = R.id.btnKotakplNext;
      Button btnKotakplNext = rootView.findViewById(id);
      if (btnKotakplNext == null) {
        break missingId;
      }

      id = R.id.btnROICalc;
      Button btnROICalc = rootView.findViewById(id);
      if (btnROICalc == null) {
        break missingId;
      }

      id = R.id.ccCompantDetail;
      CardView ccCompantDetail = rootView.findViewById(id);
      if (ccCompantDetail == null) {
        break missingId;
      }

      id = R.id.ccContactDetail;
      CardView ccContactDetail = rootView.findViewById(id);
      if (ccContactDetail == null) {
        break missingId;
      }

      id = R.id.ccCurrentAddress;
      CardView ccCurrentAddress = rootView.findViewById(id);
      if (ccCurrentAddress == null) {
        break missingId;
      }

      id = R.id.ccPersonal;
      CardView ccPersonal = rootView.findViewById(id);
      if (ccPersonal == null) {
        break missingId;
      }

      id = R.id.chkSameAsAbove;
      CheckBox chkSameAsAbove = rootView.findViewById(id);
      if (chkSameAsAbove == null) {
        break missingId;
      }

      id = R.id.chkTermsCondition;
      CheckBox chkTermsCondition = rootView.findViewById(id);
      if (chkTermsCondition == null) {
        break missingId;
      }

      id = R.id.etAadharNumber;
      EditText etAadharNumber = rootView.findViewById(id);
      if (etAadharNumber == null) {
        break missingId;
      }

      id = R.id.etAdd1;
      EditText etAdd1 = rootView.findViewById(id);
      if (etAdd1 == null) {
        break missingId;
      }

      id = R.id.etAdd2;
      EditText etAdd2 = rootView.findViewById(id);
      if (etAdd2 == null) {
        break missingId;
      }

      id = R.id.etAdd3;
      EditText etAdd3 = rootView.findViewById(id);
      if (etAdd3 == null) {
        break missingId;
      }

      id = R.id.etCRNNumber;
      EditText etCRNNumber = rootView.findViewById(id);
      if (etCRNNumber == null) {
        break missingId;
      }

      id = R.id.etCoAppDOB;
      EditText etCoAppDOB = rootView.findViewById(id);
      if (etCoAppDOB == null) {
        break missingId;
      }

      id = R.id.etCoAppEMICurrentlyPay;
      EditText etCoAppEMICurrentlyPay = rootView.findViewById(id);
      if (etCoAppEMICurrentlyPay == null) {
        break missingId;
      }

      id = R.id.etCoAppEmployerName;
      EditText etCoAppEmployerName = rootView.findViewById(id);
      if (etCoAppEmployerName == null) {
        break missingId;
      }

      id = R.id.etCoAppNrtMonthlyIncome;
      EditText etCoAppNrtMonthlyIncome = rootView.findViewById(id);
      if (etCoAppNrtMonthlyIncome == null) {
        break missingId;
      }

      id = R.id.etCurrentResidence;
      EditText etCurrentResidence = rootView.findViewById(id);
      if (etCurrentResidence == null) {
        break missingId;
      }

      id = R.id.etDOB;
      EditText etDOB = rootView.findViewById(id);
      if (etDOB == null) {
        break missingId;
      }

      id = R.id.etEmail;
      EditText etEmail = rootView.findViewById(id);
      if (etEmail == null) {
        break missingId;
      }

      id = R.id.etFirstName;
      EditText etFirstName = rootView.findViewById(id);
      if (etFirstName == null) {
        break missingId;
      }

      id = R.id.etJoiningDate;
      EditText etJoiningDate = rootView.findViewById(id);
      if (etJoiningDate == null) {
        break missingId;
      }

      id = R.id.etLastName;
      EditText etLastName = rootView.findViewById(id);
      if (etLastName == null) {
        break missingId;
      }

      id = R.id.etMiddleName;
      EditText etMiddleName = rootView.findViewById(id);
      if (etMiddleName == null) {
        break missingId;
      }

      id = R.id.etMobileNumber;
      EditText etMobileNumber = rootView.findViewById(id);
      if (etMobileNumber == null) {
        break missingId;
      }

      id = R.id.etNetMonthIncome;
      EditText etNetMonthIncome = rootView.findViewById(id);
      if (etNetMonthIncome == null) {
        break missingId;
      }

      id = R.id.etOfficeAddress1;
      EditText etOfficeAddress1 = rootView.findViewById(id);
      if (etOfficeAddress1 == null) {
        break missingId;
      }

      id = R.id.etOfficeAddress2;
      EditText etOfficeAddress2 = rootView.findViewById(id);
      if (etOfficeAddress2 == null) {
        break missingId;
      }

      id = R.id.etOfficeAddress3;
      EditText etOfficeAddress3 = rootView.findViewById(id);
      if (etOfficeAddress3 == null) {
        break missingId;
      }

      id = R.id.etOfficePhone;
      EditText etOfficePhone = rootView.findViewById(id);
      if (etOfficePhone == null) {
        break missingId;
      }

      id = R.id.etOfficePincode;
      EditText etOfficePincode = rootView.findViewById(id);
      if (etOfficePincode == null) {
        break missingId;
      }

      id = R.id.etPLRateOff;
      EditText etPLRateOff = rootView.findViewById(id);
      if (etPLRateOff == null) {
        break missingId;
      }

      id = R.id.etPanCard;
      EditText etPanCard = rootView.findViewById(id);
      if (etPanCard == null) {
        break missingId;
      }

      id = R.id.etPartyId;
      EditText etPartyId = rootView.findViewById(id);
      if (etPartyId == null) {
        break missingId;
      }

      id = R.id.etPerAdd1;
      EditText etPerAdd1 = rootView.findViewById(id);
      if (etPerAdd1 == null) {
        break missingId;
      }

      id = R.id.etPerAdd2;
      EditText etPerAdd2 = rootView.findViewById(id);
      if (etPerAdd2 == null) {
        break missingId;
      }

      id = R.id.etPerAdd3;
      EditText etPerAdd3 = rootView.findViewById(id);
      if (etPerAdd3 == null) {
        break missingId;
      }

      id = R.id.etPerPincode;
      EditText etPerPincode = rootView.findViewById(id);
      if (etPerPincode == null) {
        break missingId;
      }

      id = R.id.etPerResidencePhnNo;
      EditText etPerResidencePhnNo = rootView.findViewById(id);
      if (etPerResidencePhnNo == null) {
        break missingId;
      }

      id = R.id.etPincode;
      EditText etPincode = rootView.findViewById(id);
      if (etPincode == null) {
        break missingId;
      }

      id = R.id.etProcessingFees;
      EditText etProcessingFees = rootView.findViewById(id);
      if (etProcessingFees == null) {
        break missingId;
      }

      id = R.id.etReqLoanAmnt;
      EditText etReqLoanAmnt = rootView.findViewById(id);
      if (etReqLoanAmnt == null) {
        break missingId;
      }

      id = R.id.etResidencePhnNo;
      EditText etResidencePhnNo = rootView.findViewById(id);
      if (etResidencePhnNo == null) {
        break missingId;
      }

      id = R.id.etTotalEMIperMonth;
      EditText etTotalEMIperMonth = rootView.findViewById(id);
      if (etTotalEMIperMonth == null) {
        break missingId;
      }

      id = R.id.etTotalWorkExp;
      EditText etTotalWorkExp = rootView.findViewById(id);
      if (etTotalWorkExp == null) {
        break missingId;
      }

      id = R.id.llCoApplicantDetail;
      LinearLayout llCoApplicantDetail = rootView.findViewById(id);
      if (llCoApplicantDetail == null) {
        break missingId;
      }

      id = R.id.rbNo;
      RadioButton rbNo = rootView.findViewById(id);
      if (rbNo == null) {
        break missingId;
      }

      id = R.id.rbYes;
      RadioButton rbYes = rootView.findViewById(id);
      if (rbYes == null) {
        break missingId;
      }

      id = R.id.rbfemale;
      RadioButton rbfemale = rootView.findViewById(id);
      if (rbfemale == null) {
        break missingId;
      }

      id = R.id.rbmale;
      RadioButton rbmale = rootView.findViewById(id);
      if (rbmale == null) {
        break missingId;
      }

      id = R.id.rgCoApp;
      RadioGroup rgCoApp = rootView.findViewById(id);
      if (rgCoApp == null) {
        break missingId;
      }

      id = R.id.rgGender;
      RadioGroup rgGender = rootView.findViewById(id);
      if (rgGender == null) {
        break missingId;
      }

      id = R.id.spCoAppEmpType;
      Spinner spCoAppEmpType = rootView.findViewById(id);
      if (spCoAppEmpType == null) {
        break missingId;
      }

      id = R.id.spCurrentAddressCity;
      Spinner spCurrentAddressCity = rootView.findViewById(id);
      if (spCurrentAddressCity == null) {
        break missingId;
      }

      id = R.id.spCustomerTypeMaster;
      Spinner spCustomerTypeMaster = rootView.findViewById(id);
      if (spCustomerTypeMaster == null) {
        break missingId;
      }

      id = R.id.spEmployementType;
      Spinner spEmployementType = rootView.findViewById(id);
      if (spEmployementType == null) {
        break missingId;
      }

      id = R.id.spExistingCustomer;
      Spinner spExistingCustomer = rootView.findViewById(id);
      if (spExistingCustomer == null) {
        break missingId;
      }

      id = R.id.spOfficeCity;
      Spinner spOfficeCity = rootView.findViewById(id);
      if (spOfficeCity == null) {
        break missingId;
      }

      id = R.id.spPerCity;
      Spinner spPerCity = rootView.findViewById(id);
      if (spPerCity == null) {
        break missingId;
      }

      id = R.id.spPreferredMailingAddress;
      Spinner spPreferredMailingAddress = rootView.findViewById(id);
      if (spPreferredMailingAddress == null) {
        break missingId;
      }

      id = R.id.spQualif;
      Spinner spQualif = rootView.findViewById(id);
      if (spQualif == null) {
        break missingId;
      }

      id = R.id.spRelationshipWithCoApp;
      Spinner spRelationshipWithCoApp = rootView.findViewById(id);
      if (spRelationshipWithCoApp == null) {
        break missingId;
      }

      id = R.id.spReqLoanTenure;
      Spinner spReqLoanTenure = rootView.findViewById(id);
      if (spReqLoanTenure == null) {
        break missingId;
      }

      id = R.id.spResidenceType;
      Spinner spResidenceType = rootView.findViewById(id);
      if (spResidenceType == null) {
        break missingId;
      }

      id = R.id.tlPLRateOff;
      TextInputLayout tlPLRateOff = rootView.findViewById(id);
      if (tlPLRateOff == null) {
        break missingId;
      }

      id = R.id.tlProcessingFees;
      TextInputLayout tlProcessingFees = rootView.findViewById(id);
      if (tlProcessingFees == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = rootView.findViewById(id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityKotakpersonalloanBinding((LinearLayout) rootView, acEmployerName,
          btnKotakplNext, btnROICalc, ccCompantDetail, ccContactDetail, ccCurrentAddress,
          ccPersonal, chkSameAsAbove, chkTermsCondition, etAadharNumber, etAdd1, etAdd2, etAdd3,
          etCRNNumber, etCoAppDOB, etCoAppEMICurrentlyPay, etCoAppEmployerName,
          etCoAppNrtMonthlyIncome, etCurrentResidence, etDOB, etEmail, etFirstName, etJoiningDate,
          etLastName, etMiddleName, etMobileNumber, etNetMonthIncome, etOfficeAddress1,
          etOfficeAddress2, etOfficeAddress3, etOfficePhone, etOfficePincode, etPLRateOff,
          etPanCard, etPartyId, etPerAdd1, etPerAdd2, etPerAdd3, etPerPincode, etPerResidencePhnNo,
          etPincode, etProcessingFees, etReqLoanAmnt, etResidencePhnNo, etTotalEMIperMonth,
          etTotalWorkExp, llCoApplicantDetail, rbNo, rbYes, rbfemale, rbmale, rgCoApp, rgGender,
          spCoAppEmpType, spCurrentAddressCity, spCustomerTypeMaster, spEmployementType,
          spExistingCustomer, spOfficeCity, spPerCity, spPreferredMailingAddress, spQualif,
          spRelationshipWithCoApp, spReqLoanTenure, spResidenceType, tlPLRateOff, tlProcessingFees,
          toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
