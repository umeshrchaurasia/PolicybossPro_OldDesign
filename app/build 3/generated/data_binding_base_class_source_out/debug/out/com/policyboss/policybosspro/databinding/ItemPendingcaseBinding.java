// Generated by view binder compiler. Do not edit!
package com.policyboss.policybosspro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import com.policyboss.policybosspro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemPendingcaseBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final LinearLayout akjsh;

  @NonNull
  public final ImageView imgInsurerLogo;

  @NonNull
  public final ImageView imgStatus;

  @NonNull
  public final ImageView ivCall;

  @NonNull
  public final ImageView ivDelete;

  @NonNull
  public final ImageView ivMsg;

  @NonNull
  public final LinearLayout llDays;

  @NonNull
  public final LinearLayout llHistory;

  @NonNull
  public final LinearLayout llInfo;

  @NonNull
  public final LinearLayout llType;

  @NonNull
  public final LinearLayout llksa;

  @NonNull
  public final RelativeLayout rljk;

  @NonNull
  public final TextView txtCategory;

  @NonNull
  public final TextView txtCustName;

  @NonNull
  public final TextView txtHistory;

  @NonNull
  public final TextView txtKnowMore;

  @NonNull
  public final TextView txtOverflowMenu;

  @NonNull
  public final TextView txtPendingDays;

  @NonNull
  public final TextView txtType;

  @NonNull
  public final TextView txtquickType;

  @NonNull
  public final ImageView view;

  private ItemPendingcaseBinding(@NonNull CardView rootView, @NonNull LinearLayout akjsh,
      @NonNull ImageView imgInsurerLogo, @NonNull ImageView imgStatus, @NonNull ImageView ivCall,
      @NonNull ImageView ivDelete, @NonNull ImageView ivMsg, @NonNull LinearLayout llDays,
      @NonNull LinearLayout llHistory, @NonNull LinearLayout llInfo, @NonNull LinearLayout llType,
      @NonNull LinearLayout llksa, @NonNull RelativeLayout rljk, @NonNull TextView txtCategory,
      @NonNull TextView txtCustName, @NonNull TextView txtHistory, @NonNull TextView txtKnowMore,
      @NonNull TextView txtOverflowMenu, @NonNull TextView txtPendingDays,
      @NonNull TextView txtType, @NonNull TextView txtquickType, @NonNull ImageView view) {
    this.rootView = rootView;
    this.akjsh = akjsh;
    this.imgInsurerLogo = imgInsurerLogo;
    this.imgStatus = imgStatus;
    this.ivCall = ivCall;
    this.ivDelete = ivDelete;
    this.ivMsg = ivMsg;
    this.llDays = llDays;
    this.llHistory = llHistory;
    this.llInfo = llInfo;
    this.llType = llType;
    this.llksa = llksa;
    this.rljk = rljk;
    this.txtCategory = txtCategory;
    this.txtCustName = txtCustName;
    this.txtHistory = txtHistory;
    this.txtKnowMore = txtKnowMore;
    this.txtOverflowMenu = txtOverflowMenu;
    this.txtPendingDays = txtPendingDays;
    this.txtType = txtType;
    this.txtquickType = txtquickType;
    this.view = view;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemPendingcaseBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemPendingcaseBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_pendingcase, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemPendingcaseBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.akjsh;
      LinearLayout akjsh = rootView.findViewById(id);
      if (akjsh == null) {
        break missingId;
      }

      id = R.id.imgInsurerLogo;
      ImageView imgInsurerLogo = rootView.findViewById(id);
      if (imgInsurerLogo == null) {
        break missingId;
      }

      id = R.id.imgStatus;
      ImageView imgStatus = rootView.findViewById(id);
      if (imgStatus == null) {
        break missingId;
      }

      id = R.id.ivCall;
      ImageView ivCall = rootView.findViewById(id);
      if (ivCall == null) {
        break missingId;
      }

      id = R.id.ivDelete;
      ImageView ivDelete = rootView.findViewById(id);
      if (ivDelete == null) {
        break missingId;
      }

      id = R.id.ivMsg;
      ImageView ivMsg = rootView.findViewById(id);
      if (ivMsg == null) {
        break missingId;
      }

      id = R.id.llDays;
      LinearLayout llDays = rootView.findViewById(id);
      if (llDays == null) {
        break missingId;
      }

      id = R.id.llHistory;
      LinearLayout llHistory = rootView.findViewById(id);
      if (llHistory == null) {
        break missingId;
      }

      id = R.id.llInfo;
      LinearLayout llInfo = rootView.findViewById(id);
      if (llInfo == null) {
        break missingId;
      }

      id = R.id.llType;
      LinearLayout llType = rootView.findViewById(id);
      if (llType == null) {
        break missingId;
      }

      id = R.id.llksa;
      LinearLayout llksa = rootView.findViewById(id);
      if (llksa == null) {
        break missingId;
      }

      id = R.id.rljk;
      RelativeLayout rljk = rootView.findViewById(id);
      if (rljk == null) {
        break missingId;
      }

      id = R.id.txtCategory;
      TextView txtCategory = rootView.findViewById(id);
      if (txtCategory == null) {
        break missingId;
      }

      id = R.id.txtCustName;
      TextView txtCustName = rootView.findViewById(id);
      if (txtCustName == null) {
        break missingId;
      }

      id = R.id.txtHistory;
      TextView txtHistory = rootView.findViewById(id);
      if (txtHistory == null) {
        break missingId;
      }

      id = R.id.txtKnowMore;
      TextView txtKnowMore = rootView.findViewById(id);
      if (txtKnowMore == null) {
        break missingId;
      }

      id = R.id.txtOverflowMenu;
      TextView txtOverflowMenu = rootView.findViewById(id);
      if (txtOverflowMenu == null) {
        break missingId;
      }

      id = R.id.txtPendingDays;
      TextView txtPendingDays = rootView.findViewById(id);
      if (txtPendingDays == null) {
        break missingId;
      }

      id = R.id.txtType;
      TextView txtType = rootView.findViewById(id);
      if (txtType == null) {
        break missingId;
      }

      id = R.id.txtquickType;
      TextView txtquickType = rootView.findViewById(id);
      if (txtquickType == null) {
        break missingId;
      }

      id = R.id.view;
      ImageView view = rootView.findViewById(id);
      if (view == null) {
        break missingId;
      }

      return new ItemPendingcaseBinding((CardView) rootView, akjsh, imgInsurerLogo, imgStatus,
          ivCall, ivDelete, ivMsg, llDays, llHistory, llInfo, llType, llksa, rljk, txtCategory,
          txtCustName, txtHistory, txtKnowMore, txtOverflowMenu, txtPendingDays, txtType,
          txtquickType, view);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
