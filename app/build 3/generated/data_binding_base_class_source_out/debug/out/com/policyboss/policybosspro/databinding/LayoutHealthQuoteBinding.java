// Generated by view binder compiler. Do not edit!
package com.policyboss.policybosspro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.policyboss.policybosspro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutHealthQuoteBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CheckBox chkCompare;

  @NonNull
  public final ImageView imgDropDown;

  @NonNull
  public final ImageView imgInsurer;

  @NonNull
  public final LinearLayout llBenefits;

  @NonNull
  public final LinearLayout llCount;

  @NonNull
  public final TextView txtBuy;

  @NonNull
  public final TextView txtDeductible;

  @NonNull
  public final TextView txtFinalPremium;

  @NonNull
  public final TextView txtIcuRent;

  @NonNull
  public final TextView txtNoOfInsurer;

  @NonNull
  public final TextView txtPlanName;

  @NonNull
  public final TextView txtPostHosp;

  @NonNull
  public final TextView txtPreHosp;

  @NonNull
  public final TextView txtProductName;

  @NonNull
  public final TextView txtRoomRent;

  @NonNull
  public final TextView txtSumAssured;

  private LayoutHealthQuoteBinding(@NonNull LinearLayout rootView, @NonNull CheckBox chkCompare,
      @NonNull ImageView imgDropDown, @NonNull ImageView imgInsurer,
      @NonNull LinearLayout llBenefits, @NonNull LinearLayout llCount, @NonNull TextView txtBuy,
      @NonNull TextView txtDeductible, @NonNull TextView txtFinalPremium,
      @NonNull TextView txtIcuRent, @NonNull TextView txtNoOfInsurer, @NonNull TextView txtPlanName,
      @NonNull TextView txtPostHosp, @NonNull TextView txtPreHosp, @NonNull TextView txtProductName,
      @NonNull TextView txtRoomRent, @NonNull TextView txtSumAssured) {
    this.rootView = rootView;
    this.chkCompare = chkCompare;
    this.imgDropDown = imgDropDown;
    this.imgInsurer = imgInsurer;
    this.llBenefits = llBenefits;
    this.llCount = llCount;
    this.txtBuy = txtBuy;
    this.txtDeductible = txtDeductible;
    this.txtFinalPremium = txtFinalPremium;
    this.txtIcuRent = txtIcuRent;
    this.txtNoOfInsurer = txtNoOfInsurer;
    this.txtPlanName = txtPlanName;
    this.txtPostHosp = txtPostHosp;
    this.txtPreHosp = txtPreHosp;
    this.txtProductName = txtProductName;
    this.txtRoomRent = txtRoomRent;
    this.txtSumAssured = txtSumAssured;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutHealthQuoteBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutHealthQuoteBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_health_quote, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutHealthQuoteBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.chkCompare;
      CheckBox chkCompare = rootView.findViewById(id);
      if (chkCompare == null) {
        break missingId;
      }

      id = R.id.imgDropDown;
      ImageView imgDropDown = rootView.findViewById(id);
      if (imgDropDown == null) {
        break missingId;
      }

      id = R.id.imgInsurer;
      ImageView imgInsurer = rootView.findViewById(id);
      if (imgInsurer == null) {
        break missingId;
      }

      id = R.id.llBenefits;
      LinearLayout llBenefits = rootView.findViewById(id);
      if (llBenefits == null) {
        break missingId;
      }

      id = R.id.llCount;
      LinearLayout llCount = rootView.findViewById(id);
      if (llCount == null) {
        break missingId;
      }

      id = R.id.txtBuy;
      TextView txtBuy = rootView.findViewById(id);
      if (txtBuy == null) {
        break missingId;
      }

      id = R.id.txtDeductible;
      TextView txtDeductible = rootView.findViewById(id);
      if (txtDeductible == null) {
        break missingId;
      }

      id = R.id.txtFinalPremium;
      TextView txtFinalPremium = rootView.findViewById(id);
      if (txtFinalPremium == null) {
        break missingId;
      }

      id = R.id.txtIcuRent;
      TextView txtIcuRent = rootView.findViewById(id);
      if (txtIcuRent == null) {
        break missingId;
      }

      id = R.id.txtNoOfInsurer;
      TextView txtNoOfInsurer = rootView.findViewById(id);
      if (txtNoOfInsurer == null) {
        break missingId;
      }

      id = R.id.txtPlanName;
      TextView txtPlanName = rootView.findViewById(id);
      if (txtPlanName == null) {
        break missingId;
      }

      id = R.id.txtPostHosp;
      TextView txtPostHosp = rootView.findViewById(id);
      if (txtPostHosp == null) {
        break missingId;
      }

      id = R.id.txtPreHosp;
      TextView txtPreHosp = rootView.findViewById(id);
      if (txtPreHosp == null) {
        break missingId;
      }

      id = R.id.txtProductName;
      TextView txtProductName = rootView.findViewById(id);
      if (txtProductName == null) {
        break missingId;
      }

      id = R.id.txtRoomRent;
      TextView txtRoomRent = rootView.findViewById(id);
      if (txtRoomRent == null) {
        break missingId;
      }

      id = R.id.txtSumAssured;
      TextView txtSumAssured = rootView.findViewById(id);
      if (txtSumAssured == null) {
        break missingId;
      }

      return new LayoutHealthQuoteBinding((LinearLayout) rootView, chkCompare, imgDropDown,
          imgInsurer, llBenefits, llCount, txtBuy, txtDeductible, txtFinalPremium, txtIcuRent,
          txtNoOfInsurer, txtPlanName, txtPostHosp, txtPreHosp, txtProductName, txtRoomRent,
          txtSumAssured);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
