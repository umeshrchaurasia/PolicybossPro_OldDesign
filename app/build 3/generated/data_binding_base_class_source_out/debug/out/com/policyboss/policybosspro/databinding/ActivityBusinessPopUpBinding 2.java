// Generated by view binder compiler. Do not edit!
package com.policyboss.policybosspro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.policyboss.policybosspro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityBusinessPopUpBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final RecyclerView BuisnessRecycler;

  @NonNull
  public final Button btnClose;

  @NonNull
  public final LinearLayout layoutTot;

  @NonNull
  public final TextView textView16;

  @NonNull
  public final TextView txtHdr;

  @NonNull
  public final TextView txtTotCount;

  @NonNull
  public final TextView txtTotLoanAmnt;

  private ActivityBusinessPopUpBinding(@NonNull CoordinatorLayout rootView,
      @NonNull RecyclerView BuisnessRecycler, @NonNull Button btnClose,
      @NonNull LinearLayout layoutTot, @NonNull TextView textView16, @NonNull TextView txtHdr,
      @NonNull TextView txtTotCount, @NonNull TextView txtTotLoanAmnt) {
    this.rootView = rootView;
    this.BuisnessRecycler = BuisnessRecycler;
    this.btnClose = btnClose;
    this.layoutTot = layoutTot;
    this.textView16 = textView16;
    this.txtHdr = txtHdr;
    this.txtTotCount = txtTotCount;
    this.txtTotLoanAmnt = txtTotLoanAmnt;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityBusinessPopUpBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityBusinessPopUpBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_business_pop_up, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityBusinessPopUpBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.BuisnessRecycler;
      RecyclerView BuisnessRecycler = rootView.findViewById(id);
      if (BuisnessRecycler == null) {
        break missingId;
      }

      id = R.id.btnClose;
      Button btnClose = rootView.findViewById(id);
      if (btnClose == null) {
        break missingId;
      }

      id = R.id.layout_tot;
      LinearLayout layoutTot = rootView.findViewById(id);
      if (layoutTot == null) {
        break missingId;
      }

      id = R.id.textView16;
      TextView textView16 = rootView.findViewById(id);
      if (textView16 == null) {
        break missingId;
      }

      id = R.id.txtHdr;
      TextView txtHdr = rootView.findViewById(id);
      if (txtHdr == null) {
        break missingId;
      }

      id = R.id.txtTotCount;
      TextView txtTotCount = rootView.findViewById(id);
      if (txtTotCount == null) {
        break missingId;
      }

      id = R.id.txtTotLoanAmnt;
      TextView txtTotLoanAmnt = rootView.findViewById(id);
      if (txtTotLoanAmnt == null) {
        break missingId;
      }

      return new ActivityBusinessPopUpBinding((CoordinatorLayout) rootView, BuisnessRecycler,
          btnClose, layoutTot, textView16, txtHdr, txtTotCount, txtTotLoanAmnt);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
