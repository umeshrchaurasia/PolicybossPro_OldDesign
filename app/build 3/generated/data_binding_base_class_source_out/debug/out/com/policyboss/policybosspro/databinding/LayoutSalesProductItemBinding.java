// Generated by view binder compiler. Do not edit!
package com.policyboss.policybosspro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import com.policyboss.policybosspro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutSalesProductItemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final ImageView imgProduct;

  @NonNull
  public final LinearLayout lyParent;

  @NonNull
  public final TextView txtCount;

  @NonNull
  public final TextView txtProductName;

  private LayoutSalesProductItemBinding(@NonNull CardView rootView, @NonNull ImageView imgProduct,
      @NonNull LinearLayout lyParent, @NonNull TextView txtCount,
      @NonNull TextView txtProductName) {
    this.rootView = rootView;
    this.imgProduct = imgProduct;
    this.lyParent = lyParent;
    this.txtCount = txtCount;
    this.txtProductName = txtProductName;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutSalesProductItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutSalesProductItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_sales_product_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutSalesProductItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.imgProduct;
      ImageView imgProduct = rootView.findViewById(id);
      if (imgProduct == null) {
        break missingId;
      }

      id = R.id.lyParent;
      LinearLayout lyParent = rootView.findViewById(id);
      if (lyParent == null) {
        break missingId;
      }

      id = R.id.txtCount;
      TextView txtCount = rootView.findViewById(id);
      if (txtCount == null) {
        break missingId;
      }

      id = R.id.txtProductName;
      TextView txtProductName = rootView.findViewById(id);
      if (txtProductName == null) {
        break missingId;
      }

      return new LayoutSalesProductItemBinding((CardView) rootView, imgProduct, lyParent, txtCount,
          txtProductName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
