// Generated by view binder compiler. Do not edit!
package com.policyboss.policybosspro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import com.policyboss.policybosspro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutBusinessItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CardView cardViewSpinner;

  @NonNull
  public final TextView txtAmount;

  @NonNull
  public final TextView txtCustName;

  @NonNull
  public final TextView txtProduct;

  @NonNull
  public final TextView txtbank;

  private LayoutBusinessItemBinding(@NonNull LinearLayout rootView,
      @NonNull CardView cardViewSpinner, @NonNull TextView txtAmount, @NonNull TextView txtCustName,
      @NonNull TextView txtProduct, @NonNull TextView txtbank) {
    this.rootView = rootView;
    this.cardViewSpinner = cardViewSpinner;
    this.txtAmount = txtAmount;
    this.txtCustName = txtCustName;
    this.txtProduct = txtProduct;
    this.txtbank = txtbank;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutBusinessItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutBusinessItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_business_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutBusinessItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.card_view_spinner;
      CardView cardViewSpinner = rootView.findViewById(id);
      if (cardViewSpinner == null) {
        break missingId;
      }

      id = R.id.txtAmount;
      TextView txtAmount = rootView.findViewById(id);
      if (txtAmount == null) {
        break missingId;
      }

      id = R.id.txtCustName;
      TextView txtCustName = rootView.findViewById(id);
      if (txtCustName == null) {
        break missingId;
      }

      id = R.id.txtProduct;
      TextView txtProduct = rootView.findViewById(id);
      if (txtProduct == null) {
        break missingId;
      }

      id = R.id.txtbank;
      TextView txtbank = rootView.findViewById(id);
      if (txtbank == null) {
        break missingId;
      }

      return new LayoutBusinessItemBinding((LinearLayout) rootView, cardViewSpinner, txtAmount,
          txtCustName, txtProduct, txtbank);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
