// Generated by view binder compiler. Do not edit!
package com.policyboss.policybosspro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import com.policyboss.policybosspro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemChildpospBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final LinearLayout llksa;

  @NonNull
  public final RelativeLayout rljk;

  @NonNull
  public final TextView txtCustName;

  @NonNull
  public final TextView txtEmail;

  @NonNull
  public final TextView txtFbaID;

  @NonNull
  public final TextView txtmobile;

  private ItemChildpospBinding(@NonNull CardView rootView, @NonNull LinearLayout llksa,
      @NonNull RelativeLayout rljk, @NonNull TextView txtCustName, @NonNull TextView txtEmail,
      @NonNull TextView txtFbaID, @NonNull TextView txtmobile) {
    this.rootView = rootView;
    this.llksa = llksa;
    this.rljk = rljk;
    this.txtCustName = txtCustName;
    this.txtEmail = txtEmail;
    this.txtFbaID = txtFbaID;
    this.txtmobile = txtmobile;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemChildpospBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemChildpospBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_childposp, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemChildpospBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.llksa;
      LinearLayout llksa = rootView.findViewById(id);
      if (llksa == null) {
        break missingId;
      }

      id = R.id.rljk;
      RelativeLayout rljk = rootView.findViewById(id);
      if (rljk == null) {
        break missingId;
      }

      id = R.id.txtCustName;
      TextView txtCustName = rootView.findViewById(id);
      if (txtCustName == null) {
        break missingId;
      }

      id = R.id.txtEmail;
      TextView txtEmail = rootView.findViewById(id);
      if (txtEmail == null) {
        break missingId;
      }

      id = R.id.txtFbaID;
      TextView txtFbaID = rootView.findViewById(id);
      if (txtFbaID == null) {
        break missingId;
      }

      id = R.id.txtmobile;
      TextView txtmobile = rootView.findViewById(id);
      if (txtmobile == null) {
        break missingId;
      }

      return new ItemChildpospBinding((CardView) rootView, llksa, rljk, txtCustName, txtEmail,
          txtFbaID, txtmobile);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
