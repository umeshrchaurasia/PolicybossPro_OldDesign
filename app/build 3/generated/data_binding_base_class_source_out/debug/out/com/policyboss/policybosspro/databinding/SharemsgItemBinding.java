// Generated by view binder compiler. Do not edit!
package com.policyboss.policybosspro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import com.policyboss.policybosspro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SharemsgItemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final ImageView btnCall;

  @NonNull
  public final ImageView imgIcon;

  @NonNull
  public final TextView txtFollowupName;

  @NonNull
  public final TextView txtFollowupRemark;

  @NonNull
  public final TextView txtFollowupStatus;

  private SharemsgItemBinding(@NonNull CardView rootView, @NonNull ImageView btnCall,
      @NonNull ImageView imgIcon, @NonNull TextView txtFollowupName,
      @NonNull TextView txtFollowupRemark, @NonNull TextView txtFollowupStatus) {
    this.rootView = rootView;
    this.btnCall = btnCall;
    this.imgIcon = imgIcon;
    this.txtFollowupName = txtFollowupName;
    this.txtFollowupRemark = txtFollowupRemark;
    this.txtFollowupStatus = txtFollowupStatus;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static SharemsgItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SharemsgItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.sharemsg_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SharemsgItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCall;
      ImageView btnCall = rootView.findViewById(id);
      if (btnCall == null) {
        break missingId;
      }

      id = R.id.imgIcon;
      ImageView imgIcon = rootView.findViewById(id);
      if (imgIcon == null) {
        break missingId;
      }

      id = R.id.txtFollowupName;
      TextView txtFollowupName = rootView.findViewById(id);
      if (txtFollowupName == null) {
        break missingId;
      }

      id = R.id.txtFollowupRemark;
      TextView txtFollowupRemark = rootView.findViewById(id);
      if (txtFollowupRemark == null) {
        break missingId;
      }

      id = R.id.txtFollowupStatus;
      TextView txtFollowupStatus = rootView.findViewById(id);
      if (txtFollowupStatus == null) {
        break missingId;
      }

      return new SharemsgItemBinding((CardView) rootView, btnCall, imgIcon, txtFollowupName,
          txtFollowupRemark, txtFollowupStatus);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
