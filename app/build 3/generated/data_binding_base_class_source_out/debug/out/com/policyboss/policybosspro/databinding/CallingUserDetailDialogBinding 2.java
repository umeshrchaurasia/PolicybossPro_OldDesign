// Generated by view binder compiler. Do not edit!
package com.policyboss.policybosspro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.policyboss.policybosspro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CallingUserDetailDialogBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout bottomSheetDialog;

  @NonNull
  public final ImageView ivCross;

  @NonNull
  public final RecyclerView rvCalling;

  @NonNull
  public final TextView txtHdr;

  @NonNull
  public final TextView txtMessage;

  private CallingUserDetailDialogBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout bottomSheetDialog, @NonNull ImageView ivCross,
      @NonNull RecyclerView rvCalling, @NonNull TextView txtHdr, @NonNull TextView txtMessage) {
    this.rootView = rootView;
    this.bottomSheetDialog = bottomSheetDialog;
    this.ivCross = ivCross;
    this.rvCalling = rvCalling;
    this.txtHdr = txtHdr;
    this.txtMessage = txtMessage;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CallingUserDetailDialogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CallingUserDetailDialogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.calling_user_detail_dialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CallingUserDetailDialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      LinearLayout bottomSheetDialog = (LinearLayout) rootView;

      id = R.id.ivCross;
      ImageView ivCross = rootView.findViewById(id);
      if (ivCross == null) {
        break missingId;
      }

      id = R.id.rvCalling;
      RecyclerView rvCalling = rootView.findViewById(id);
      if (rvCalling == null) {
        break missingId;
      }

      id = R.id.txtHdr;
      TextView txtHdr = rootView.findViewById(id);
      if (txtHdr == null) {
        break missingId;
      }

      id = R.id.txtMessage;
      TextView txtMessage = rootView.findViewById(id);
      if (txtMessage == null) {
        break missingId;
      }

      return new CallingUserDetailDialogBinding((LinearLayout) rootView, bottomSheetDialog, ivCross,
          rvCalling, txtHdr, txtMessage);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
