// Generated by view binder compiler. Do not edit!
package com.policyboss.policybosspro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TableLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.viewbinding.ViewBinding;
import com.policyboss.policybosspro.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutBenefitPayableToNomineeBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final AppCompatImageView ivClose;

  @NonNull
  public final TextView lblAnnualPayout;

  @NonNull
  public final TextView lblMonthlyPayout;

  @NonNull
  public final TextView lblMonthlyPayoutAfterMaturity;

  @NonNull
  public final TableLayout tbParent;

  @NonNull
  public final TextView txtHdr;

  @NonNull
  public final TextView txtJeevanAnnualPayoutfor;

  @NonNull
  public final TextView txtJeevanImmediately;

  @NonNull
  public final TextView txtJeevanMaturityDate;

  @NonNull
  public final TextView txtJeevanMonthlyPayoutfor5;

  @NonNull
  public final TextView txtJeevanMonthlyPayoutfor9;

  @NonNull
  public final TextView txtJeevanTotal;

  @NonNull
  public final TextView txtUltraAnnualPayoutfor;

  @NonNull
  public final TextView txtUltraImmediately;

  @NonNull
  public final TextView txtUltraMaturityDate;

  @NonNull
  public final TextView txtUltraMonthlyPayoutfor5;

  @NonNull
  public final TextView txtUltraMonthlyPayoutforFirst;

  @NonNull
  public final TextView txtUltraTotal;

  private LayoutBenefitPayableToNomineeBinding(@NonNull RelativeLayout rootView,
      @NonNull AppCompatImageView ivClose, @NonNull TextView lblAnnualPayout,
      @NonNull TextView lblMonthlyPayout, @NonNull TextView lblMonthlyPayoutAfterMaturity,
      @NonNull TableLayout tbParent, @NonNull TextView txtHdr,
      @NonNull TextView txtJeevanAnnualPayoutfor, @NonNull TextView txtJeevanImmediately,
      @NonNull TextView txtJeevanMaturityDate, @NonNull TextView txtJeevanMonthlyPayoutfor5,
      @NonNull TextView txtJeevanMonthlyPayoutfor9, @NonNull TextView txtJeevanTotal,
      @NonNull TextView txtUltraAnnualPayoutfor, @NonNull TextView txtUltraImmediately,
      @NonNull TextView txtUltraMaturityDate, @NonNull TextView txtUltraMonthlyPayoutfor5,
      @NonNull TextView txtUltraMonthlyPayoutforFirst, @NonNull TextView txtUltraTotal) {
    this.rootView = rootView;
    this.ivClose = ivClose;
    this.lblAnnualPayout = lblAnnualPayout;
    this.lblMonthlyPayout = lblMonthlyPayout;
    this.lblMonthlyPayoutAfterMaturity = lblMonthlyPayoutAfterMaturity;
    this.tbParent = tbParent;
    this.txtHdr = txtHdr;
    this.txtJeevanAnnualPayoutfor = txtJeevanAnnualPayoutfor;
    this.txtJeevanImmediately = txtJeevanImmediately;
    this.txtJeevanMaturityDate = txtJeevanMaturityDate;
    this.txtJeevanMonthlyPayoutfor5 = txtJeevanMonthlyPayoutfor5;
    this.txtJeevanMonthlyPayoutfor9 = txtJeevanMonthlyPayoutfor9;
    this.txtJeevanTotal = txtJeevanTotal;
    this.txtUltraAnnualPayoutfor = txtUltraAnnualPayoutfor;
    this.txtUltraImmediately = txtUltraImmediately;
    this.txtUltraMaturityDate = txtUltraMaturityDate;
    this.txtUltraMonthlyPayoutfor5 = txtUltraMonthlyPayoutfor5;
    this.txtUltraMonthlyPayoutforFirst = txtUltraMonthlyPayoutforFirst;
    this.txtUltraTotal = txtUltraTotal;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutBenefitPayableToNomineeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutBenefitPayableToNomineeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_benefit_payable_to_nominee, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutBenefitPayableToNomineeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ivClose;
      AppCompatImageView ivClose = rootView.findViewById(id);
      if (ivClose == null) {
        break missingId;
      }

      id = R.id.lblAnnualPayout;
      TextView lblAnnualPayout = rootView.findViewById(id);
      if (lblAnnualPayout == null) {
        break missingId;
      }

      id = R.id.lblMonthlyPayout;
      TextView lblMonthlyPayout = rootView.findViewById(id);
      if (lblMonthlyPayout == null) {
        break missingId;
      }

      id = R.id.lblMonthlyPayoutAfterMaturity;
      TextView lblMonthlyPayoutAfterMaturity = rootView.findViewById(id);
      if (lblMonthlyPayoutAfterMaturity == null) {
        break missingId;
      }

      id = R.id.tbParent;
      TableLayout tbParent = rootView.findViewById(id);
      if (tbParent == null) {
        break missingId;
      }

      id = R.id.txtHdr;
      TextView txtHdr = rootView.findViewById(id);
      if (txtHdr == null) {
        break missingId;
      }

      id = R.id.txtJeevanAnnualPayoutfor;
      TextView txtJeevanAnnualPayoutfor = rootView.findViewById(id);
      if (txtJeevanAnnualPayoutfor == null) {
        break missingId;
      }

      id = R.id.txtJeevanImmediately;
      TextView txtJeevanImmediately = rootView.findViewById(id);
      if (txtJeevanImmediately == null) {
        break missingId;
      }

      id = R.id.txtJeevanMaturityDate;
      TextView txtJeevanMaturityDate = rootView.findViewById(id);
      if (txtJeevanMaturityDate == null) {
        break missingId;
      }

      id = R.id.txtJeevanMonthlyPayoutfor5;
      TextView txtJeevanMonthlyPayoutfor5 = rootView.findViewById(id);
      if (txtJeevanMonthlyPayoutfor5 == null) {
        break missingId;
      }

      id = R.id.txtJeevanMonthlyPayoutfor9;
      TextView txtJeevanMonthlyPayoutfor9 = rootView.findViewById(id);
      if (txtJeevanMonthlyPayoutfor9 == null) {
        break missingId;
      }

      id = R.id.txtJeevanTotal;
      TextView txtJeevanTotal = rootView.findViewById(id);
      if (txtJeevanTotal == null) {
        break missingId;
      }

      id = R.id.txtUltraAnnualPayoutfor;
      TextView txtUltraAnnualPayoutfor = rootView.findViewById(id);
      if (txtUltraAnnualPayoutfor == null) {
        break missingId;
      }

      id = R.id.txtUltraImmediately;
      TextView txtUltraImmediately = rootView.findViewById(id);
      if (txtUltraImmediately == null) {
        break missingId;
      }

      id = R.id.txtUltraMaturityDate;
      TextView txtUltraMaturityDate = rootView.findViewById(id);
      if (txtUltraMaturityDate == null) {
        break missingId;
      }

      id = R.id.txtUltraMonthlyPayoutfor5;
      TextView txtUltraMonthlyPayoutfor5 = rootView.findViewById(id);
      if (txtUltraMonthlyPayoutfor5 == null) {
        break missingId;
      }

      id = R.id.txtUltraMonthlyPayoutforFirst;
      TextView txtUltraMonthlyPayoutforFirst = rootView.findViewById(id);
      if (txtUltraMonthlyPayoutforFirst == null) {
        break missingId;
      }

      id = R.id.txtUltraTotal;
      TextView txtUltraTotal = rootView.findViewById(id);
      if (txtUltraTotal == null) {
        break missingId;
      }

      return new LayoutBenefitPayableToNomineeBinding((RelativeLayout) rootView, ivClose,
          lblAnnualPayout, lblMonthlyPayout, lblMonthlyPayoutAfterMaturity, tbParent, txtHdr,
          txtJeevanAnnualPayoutfor, txtJeevanImmediately, txtJeevanMaturityDate,
          txtJeevanMonthlyPayoutfor5, txtJeevanMonthlyPayoutfor9, txtJeevanTotal,
          txtUltraAnnualPayoutfor, txtUltraImmediately, txtUltraMaturityDate,
          txtUltraMonthlyPayoutfor5, txtUltraMonthlyPayoutforFirst, txtUltraTotal);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
