// Generated by view binder compiler. Do not edit!
package com.policyboss.policybosspro.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.google.android.material.textfield.TextInputLayout;
import com.policyboss.policybosspro.R;
import com.policyboss.policybosspro.register.adapters.MultiSelectionSpinner;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ContentRegisterBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final Button btnSubmit;

  @NonNull
  public final CheckBox chbxBonds;

  @NonNull
  public final CheckBox chbxGen;

  @NonNull
  public final CheckBox chbxHealth;

  @NonNull
  public final CheckBox chbxLife;

  @NonNull
  public final CheckBox chbxMutual;

  @NonNull
  public final CheckBox chbxPostal;

  @NonNull
  public final CheckBox chbxStocks;

  @NonNull
  public final EditText etCity;

  @NonNull
  public final EditText etConfirmEmail;

  @NonNull
  public final EditText etDob;

  @NonNull
  public final EditText etEmail;

  @NonNull
  public final EditText etFirstName;

  @NonNull
  public final EditText etLastName;

  @NonNull
  public final EditText etMobile1;

  @NonNull
  public final EditText etMobile2;

  @NonNull
  public final EditText etPincode;

  @NonNull
  public final EditText etRefererCode;

  @NonNull
  public final EditText etState;

  @NonNull
  public final ImageView ivPersonalInfo;

  @NonNull
  public final ImageView ivProfessionalInfo;

  @NonNull
  public final CardView llPersonalInfo;

  @NonNull
  public final CardView llProfessionalInfo;

  @NonNull
  public final RadioGroup radioGroup;

  @NonNull
  public final RadioButton rdNineHundredNinetyNine;

  @NonNull
  public final RadioButton rdTwoHundredNinetyNine;

  @NonNull
  public final LinearLayout rlPersonalInfo;

  @NonNull
  public final LinearLayout rlProfessionalInfo;

  @NonNull
  public final RecyclerView rvPospAmount;

  @NonNull
  public final MultiSelectionSpinner spGenIns;

  @NonNull
  public final MultiSelectionSpinner spHealthIns;

  @NonNull
  public final MultiSelectionSpinner spLifeIns;

  @NonNull
  public final Spinner spReferal;

  @NonNull
  public final Spinner spSource;

  @NonNull
  public final Spinner spsales;

  @NonNull
  public final TextInputLayout tilReferer;

  @NonNull
  public final TextView txtFemale;

  @NonNull
  public final TextView txtMale;

  @NonNull
  public final TextInputLayout txtsale;

  private ContentRegisterBinding(@NonNull ScrollView rootView, @NonNull Button btnSubmit,
      @NonNull CheckBox chbxBonds, @NonNull CheckBox chbxGen, @NonNull CheckBox chbxHealth,
      @NonNull CheckBox chbxLife, @NonNull CheckBox chbxMutual, @NonNull CheckBox chbxPostal,
      @NonNull CheckBox chbxStocks, @NonNull EditText etCity, @NonNull EditText etConfirmEmail,
      @NonNull EditText etDob, @NonNull EditText etEmail, @NonNull EditText etFirstName,
      @NonNull EditText etLastName, @NonNull EditText etMobile1, @NonNull EditText etMobile2,
      @NonNull EditText etPincode, @NonNull EditText etRefererCode, @NonNull EditText etState,
      @NonNull ImageView ivPersonalInfo, @NonNull ImageView ivProfessionalInfo,
      @NonNull CardView llPersonalInfo, @NonNull CardView llProfessionalInfo,
      @NonNull RadioGroup radioGroup, @NonNull RadioButton rdNineHundredNinetyNine,
      @NonNull RadioButton rdTwoHundredNinetyNine, @NonNull LinearLayout rlPersonalInfo,
      @NonNull LinearLayout rlProfessionalInfo, @NonNull RecyclerView rvPospAmount,
      @NonNull MultiSelectionSpinner spGenIns, @NonNull MultiSelectionSpinner spHealthIns,
      @NonNull MultiSelectionSpinner spLifeIns, @NonNull Spinner spReferal,
      @NonNull Spinner spSource, @NonNull Spinner spsales, @NonNull TextInputLayout tilReferer,
      @NonNull TextView txtFemale, @NonNull TextView txtMale, @NonNull TextInputLayout txtsale) {
    this.rootView = rootView;
    this.btnSubmit = btnSubmit;
    this.chbxBonds = chbxBonds;
    this.chbxGen = chbxGen;
    this.chbxHealth = chbxHealth;
    this.chbxLife = chbxLife;
    this.chbxMutual = chbxMutual;
    this.chbxPostal = chbxPostal;
    this.chbxStocks = chbxStocks;
    this.etCity = etCity;
    this.etConfirmEmail = etConfirmEmail;
    this.etDob = etDob;
    this.etEmail = etEmail;
    this.etFirstName = etFirstName;
    this.etLastName = etLastName;
    this.etMobile1 = etMobile1;
    this.etMobile2 = etMobile2;
    this.etPincode = etPincode;
    this.etRefererCode = etRefererCode;
    this.etState = etState;
    this.ivPersonalInfo = ivPersonalInfo;
    this.ivProfessionalInfo = ivProfessionalInfo;
    this.llPersonalInfo = llPersonalInfo;
    this.llProfessionalInfo = llProfessionalInfo;
    this.radioGroup = radioGroup;
    this.rdNineHundredNinetyNine = rdNineHundredNinetyNine;
    this.rdTwoHundredNinetyNine = rdTwoHundredNinetyNine;
    this.rlPersonalInfo = rlPersonalInfo;
    this.rlProfessionalInfo = rlProfessionalInfo;
    this.rvPospAmount = rvPospAmount;
    this.spGenIns = spGenIns;
    this.spHealthIns = spHealthIns;
    this.spLifeIns = spLifeIns;
    this.spReferal = spReferal;
    this.spSource = spSource;
    this.spsales = spsales;
    this.tilReferer = tilReferer;
    this.txtFemale = txtFemale;
    this.txtMale = txtMale;
    this.txtsale = txtsale;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ContentRegisterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ContentRegisterBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.content_register, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ContentRegisterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnSubmit;
      Button btnSubmit = rootView.findViewById(id);
      if (btnSubmit == null) {
        break missingId;
      }

      id = R.id.chbxBonds;
      CheckBox chbxBonds = rootView.findViewById(id);
      if (chbxBonds == null) {
        break missingId;
      }

      id = R.id.chbxGen;
      CheckBox chbxGen = rootView.findViewById(id);
      if (chbxGen == null) {
        break missingId;
      }

      id = R.id.chbxHealth;
      CheckBox chbxHealth = rootView.findViewById(id);
      if (chbxHealth == null) {
        break missingId;
      }

      id = R.id.chbxLife;
      CheckBox chbxLife = rootView.findViewById(id);
      if (chbxLife == null) {
        break missingId;
      }

      id = R.id.chbxMutual;
      CheckBox chbxMutual = rootView.findViewById(id);
      if (chbxMutual == null) {
        break missingId;
      }

      id = R.id.chbxPostal;
      CheckBox chbxPostal = rootView.findViewById(id);
      if (chbxPostal == null) {
        break missingId;
      }

      id = R.id.chbxStocks;
      CheckBox chbxStocks = rootView.findViewById(id);
      if (chbxStocks == null) {
        break missingId;
      }

      id = R.id.etCity;
      EditText etCity = rootView.findViewById(id);
      if (etCity == null) {
        break missingId;
      }

      id = R.id.etConfirmEmail;
      EditText etConfirmEmail = rootView.findViewById(id);
      if (etConfirmEmail == null) {
        break missingId;
      }

      id = R.id.etDob;
      EditText etDob = rootView.findViewById(id);
      if (etDob == null) {
        break missingId;
      }

      id = R.id.etEmail;
      EditText etEmail = rootView.findViewById(id);
      if (etEmail == null) {
        break missingId;
      }

      id = R.id.etFirstName;
      EditText etFirstName = rootView.findViewById(id);
      if (etFirstName == null) {
        break missingId;
      }

      id = R.id.etLastName;
      EditText etLastName = rootView.findViewById(id);
      if (etLastName == null) {
        break missingId;
      }

      id = R.id.etMobile1;
      EditText etMobile1 = rootView.findViewById(id);
      if (etMobile1 == null) {
        break missingId;
      }

      id = R.id.etMobile2;
      EditText etMobile2 = rootView.findViewById(id);
      if (etMobile2 == null) {
        break missingId;
      }

      id = R.id.etPincode;
      EditText etPincode = rootView.findViewById(id);
      if (etPincode == null) {
        break missingId;
      }

      id = R.id.etRefererCode;
      EditText etRefererCode = rootView.findViewById(id);
      if (etRefererCode == null) {
        break missingId;
      }

      id = R.id.etState;
      EditText etState = rootView.findViewById(id);
      if (etState == null) {
        break missingId;
      }

      id = R.id.ivPersonalInfo;
      ImageView ivPersonalInfo = rootView.findViewById(id);
      if (ivPersonalInfo == null) {
        break missingId;
      }

      id = R.id.ivProfessionalInfo;
      ImageView ivProfessionalInfo = rootView.findViewById(id);
      if (ivProfessionalInfo == null) {
        break missingId;
      }

      id = R.id.llPersonalInfo;
      CardView llPersonalInfo = rootView.findViewById(id);
      if (llPersonalInfo == null) {
        break missingId;
      }

      id = R.id.llProfessionalInfo;
      CardView llProfessionalInfo = rootView.findViewById(id);
      if (llProfessionalInfo == null) {
        break missingId;
      }

      id = R.id.radioGroup;
      RadioGroup radioGroup = rootView.findViewById(id);
      if (radioGroup == null) {
        break missingId;
      }

      id = R.id.rdNineHundredNinetyNine;
      RadioButton rdNineHundredNinetyNine = rootView.findViewById(id);
      if (rdNineHundredNinetyNine == null) {
        break missingId;
      }

      id = R.id.rdTwoHundredNinetyNine;
      RadioButton rdTwoHundredNinetyNine = rootView.findViewById(id);
      if (rdTwoHundredNinetyNine == null) {
        break missingId;
      }

      id = R.id.rlPersonalInfo;
      LinearLayout rlPersonalInfo = rootView.findViewById(id);
      if (rlPersonalInfo == null) {
        break missingId;
      }

      id = R.id.rlProfessionalInfo;
      LinearLayout rlProfessionalInfo = rootView.findViewById(id);
      if (rlProfessionalInfo == null) {
        break missingId;
      }

      id = R.id.rvPospAmount;
      RecyclerView rvPospAmount = rootView.findViewById(id);
      if (rvPospAmount == null) {
        break missingId;
      }

      id = R.id.spGenIns;
      MultiSelectionSpinner spGenIns = rootView.findViewById(id);
      if (spGenIns == null) {
        break missingId;
      }

      id = R.id.spHealthIns;
      MultiSelectionSpinner spHealthIns = rootView.findViewById(id);
      if (spHealthIns == null) {
        break missingId;
      }

      id = R.id.spLifeIns;
      MultiSelectionSpinner spLifeIns = rootView.findViewById(id);
      if (spLifeIns == null) {
        break missingId;
      }

      id = R.id.spReferal;
      Spinner spReferal = rootView.findViewById(id);
      if (spReferal == null) {
        break missingId;
      }

      id = R.id.spSource;
      Spinner spSource = rootView.findViewById(id);
      if (spSource == null) {
        break missingId;
      }

      id = R.id.spsales;
      Spinner spsales = rootView.findViewById(id);
      if (spsales == null) {
        break missingId;
      }

      id = R.id.tilReferer;
      TextInputLayout tilReferer = rootView.findViewById(id);
      if (tilReferer == null) {
        break missingId;
      }

      id = R.id.txtFemale;
      TextView txtFemale = rootView.findViewById(id);
      if (txtFemale == null) {
        break missingId;
      }

      id = R.id.txtMale;
      TextView txtMale = rootView.findViewById(id);
      if (txtMale == null) {
        break missingId;
      }

      id = R.id.txtsale;
      TextInputLayout txtsale = rootView.findViewById(id);
      if (txtsale == null) {
        break missingId;
      }

      return new ContentRegisterBinding((ScrollView) rootView, btnSubmit, chbxBonds, chbxGen,
          chbxHealth, chbxLife, chbxMutual, chbxPostal, chbxStocks, etCity, etConfirmEmail, etDob,
          etEmail, etFirstName, etLastName, etMobile1, etMobile2, etPincode, etRefererCode, etState,
          ivPersonalInfo, ivProfessionalInfo, llPersonalInfo, llProfessionalInfo, radioGroup,
          rdNineHundredNinetyNine, rdTwoHundredNinetyNine, rlPersonalInfo, rlProfessionalInfo,
          rvPospAmount, spGenIns, spHealthIns, spLifeIns, spReferal, spSource, spsales, tilReferer,
          txtFemale, txtMale, txtsale);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
